{"version":3,"sources":["components/Loading/index.js","components/Navbar/index.js","components/Footer/index.js","components/MainContainer/index.js","App.js","serviceWorkerRegistration.js","index.js"],"names":["Loading","type","color","height","width","delay","className","Navbar","useState","window","location","hash","setHash","useEffect","addEventListener","to","id","Date","now","Footer","href","target","rel","Sidenav","lazy","Container","props","fallback","children","MainImage","HomePage","AboutPage","PortfolioPage","ContactPage","App","MainContainer","exact","path","component","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qHAAA,yCAmBeA,IAdC,WACZ,OAEK,aADD,CACE,IAAD,CACGC,KAAM,QACNC,MAAO,UACPC,OAAQ,MACRC,MAAO,MACPC,MAAO,IACPC,UAAW,a,0NC+DRC,MAzEf,WAAkB,MAEOC,mBAASC,OAAOC,SAASC,MAFhC,mBAEVA,EAFU,KAEJC,EAFI,KAYjB,OAPAC,qBAAU,WACTJ,OAAOK,iBAAiB,cAAc,WACrCF,EAAQH,OAAOC,SAASC,WAEvB,IAIF,qBAAKL,UAAU,oCAAf,SACC,8BACC,qBAAIA,UAAU,aAAd,UACC,oBAAIA,UAAU,WAAd,SACC,cAAC,IAAD,CACCS,GAAG,IACHC,GAAG,iBACHV,UAAU,gBAHX,mBAQD,oBAAIA,UAAU,WAAd,SACC,cAAC,IAAD,CACCS,GAAG,SACHC,GAAG,YAEHV,UACU,YAATK,EACG,kBACA,WAPL,kBAGMM,KAAKC,SAUZ,oBAAIZ,UAAU,WAAd,SACC,cAAC,IAAD,CACCS,GAAG,aACHC,GAAG,YAEHV,UACU,gBAATK,EACG,kBACA,WAPL,sBAGMM,KAAKC,iBCjCFC,G,MAXA,WAEX,OACI,wBAAQb,UAAU,SAAlB,SACQ,uBAAMA,UAAU,aAAhB,qCACI,mBAAGc,KAAK,8BAA8BC,OAAO,SAASC,IAAI,aAA1D,iC,gBCJdC,EAAUC,gBAAK,kBAAM,kCAcZC,EAZG,SAACC,GAEf,OACI,cAAC,WAAD,CAAUC,SAAU,cAAC3B,EAAA,EAAD,IAApB,SACI,uBAAMM,UAAU,UAAhB,UACKoB,EAAME,SACP,cAACL,EAAD,UCLVM,EAAYL,gBAAK,kBAAM,kCACvBM,EAAWN,gBAAK,kBAAM,wDACtBO,EAAYP,gBAAK,kBAAM,uDACvBQ,EAAgBR,gBAAK,kBAAM,8DAE3BS,EAAcT,gBAAK,kBAAM,8DA8BhBU,MA3Bf,WAIE,OACE,cAAC,IAAD,UACE,eAAC,WAAD,CAAUP,SAAW,cAAC3B,EAAA,EAAD,IAArB,UACE,cAAC6B,EAAD,IACE,cAAC,EAAD,IACE,cAACM,EAAD,UAEE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAYR,IAClC,cAAC,IAAD,CAAOM,OAAK,EAACC,KAAK,SAASC,UAAYP,IACvC,cAAC,IAAD,CAAOK,OAAK,EAACC,KAAK,aAAaC,UAAYN,IAE3C,cAAC,IAAD,CAAOI,OAAK,EAACC,KAAK,WAAWC,UAAYL,IACzC,cAAC,IAAD,CAAOK,UAAYN,SAIzB,cAAC,EAAD,U,YCxBUO,QACW,cAA7B9B,OAAOC,SAAS8B,UAEe,UAA7B/B,OAAOC,SAAS8B,UAEhB/B,OAAOC,SAAS8B,SAASC,MAAM,2DCVnCC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SDoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9ffb540c.chunk.js","sourcesContent":["import React from 'react';\nimport ReactLoading from 'react-loading';\nimport './style.css'\n\n\nconst Loading = () => {\n    return (\n        /** Render Loading animation */\n         <ReactLoading \n            type={'cylon'} \n            color={'#746634'} \n            height={'40%'} \n            width={'20%'} \n            delay={500} \n            className={'loader'}\n        />\n    );\n}\n \nexport default Loading;","import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport './style.css';\n\nfunction Navbar() {\n\t/** State for window hash */\n\tconst [hash, setHash] = useState(window.location.hash);\n\n\t/** Set state to hash of current window */\n\tuseEffect(() => {\n\t\twindow.addEventListener('hashchange', () => {\n\t\t\tsetHash(window.location.hash);\n\t\t});\n\t}, []);\n\n\t/** Render Navbar and set the current pages nav tab to active */\n\treturn (\n\t\t<nav className='navbar navbar-expand navbar-light'>\n\t\t\t<div>\n\t\t\t\t<ul className='navbar-nav'>\n\t\t\t\t\t<li className='nav-item'>\n\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\tto='/'\n\t\t\t\t\t\t\tid='nav__link-home'\n\t\t\t\t\t\t\tclassName='nav-link home'\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tNMK\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t</li>\n\t\t\t\t\t<li className='nav-item'>\n\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\tto='/about'\n\t\t\t\t\t\t\tid='nav__link'\n\t\t\t\t\t\t\tkey={Date.now()}\n\t\t\t\t\t\t\tclassName={\n\t\t\t\t\t\t\t\thash === '#/about'\n\t\t\t\t\t\t\t\t\t? 'nav-link active'\n\t\t\t\t\t\t\t\t\t: 'nav-link'\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tAbout\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t</li>\n\t\t\t\t\t<li className='nav-item'>\n\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\tto='/portfolio'\n\t\t\t\t\t\t\tid='nav__link'\n\t\t\t\t\t\t\tkey={Date.now()}\n\t\t\t\t\t\t\tclassName={\n\t\t\t\t\t\t\t\thash === '#/portfolio'\n\t\t\t\t\t\t\t\t\t? 'nav-link active'\n\t\t\t\t\t\t\t\t\t: 'nav-link'\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tPortfolio\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t</li>\n\t\t\t\t\t{/* <li className='nav-item'>\n\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\tto='/resume'\n\t\t\t\t\t\t\tid='nav__link'\n\t\t\t\t\t\t\tkey={Date.now()}\n\t\t\t\t\t\t\tclassName={\n\t\t\t\t\t\t\t\thash === '#/resume'\n\t\t\t\t\t\t\t\t\t? 'nav-link active'\n\t\t\t\t\t\t\t\t\t: 'nav-link'\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tResume\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t</li> */}\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t</nav>\n\t);\n}\n\nexport default Navbar;\n","import React from 'react';\nimport './style.css'\n\nconst Footer = () => {\n    /** Render Footer */\n    return ( \n        <footer className=\"footer\">\n                <span className=\"text-muted\"> &copy;2021 NMK / Photo by\n                    <a href=\"https://www.benwentzel.net/\" target=\"_blank\" rel=\"noreferrer\"> Ben Wentzel</a>\n                </span>\n        </footer>\n    );\n}\n \nexport default Footer;","import React, { Suspense, lazy } from 'react';\nimport './style.css';\nimport Loading from '../Loading';\n\nconst Sidenav = lazy(() => import('../Sidenav'))\n\nconst Container = (props) => {\n    /** Render MainContainer */\n    return ( \n        <Suspense fallback={<Loading />} >\n            <main className=\"wrapper\">\n                {props.children}\n                <Sidenav />\n            </main>\n        </Suspense >\n    );\n}\n \nexport default Container;","import React, { Suspense, lazy  } from \"react\";\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\nimport Navbar from './components/Navbar';\nimport Footer from './components/Footer';\nimport MainContainer from './components/MainContainer';\nimport Loading from \"./components/Loading\";\n\nconst MainImage = lazy(() => import('./components/MainImage'))\nconst HomePage = lazy(() => import('./pages/Home'));\nconst AboutPage = lazy(() => import('./pages/About'));\nconst PortfolioPage = lazy(() => import('./pages/Portfolio'));\nconst ResumePage = lazy(() => import('./pages/Resume'));\nconst ContactPage = lazy(() => import('./pages/Contact'));\n\n\nfunction App() {\n  /** Render navbar, bg image, all pages, & footer. Use code \n   * splitting and loading animation for slower connections. \n  */\n  return (\n    <Router>\n      <Suspense fallback={ <Loading /> }>\n        <MainImage />\n          <Navbar />\n            <MainContainer>\n            \n              <Switch>\n                <Route exact path=\"/\" component={ HomePage } />\n                <Route exact path=\"/about\" component={ AboutPage } />\n                <Route exact path=\"/portfolio\" component={ PortfolioPage } />\n                {/* <Route exact path=\"/resume\" component={ ResumePage } /> */}\n                <Route exact path=\"/contact\" component={ ContactPage } />\n                <Route component={ PortfolioPage } />\n              </Switch>\n              \n            </MainContainer>\n          <Footer />\n      </Suspense>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css'\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorkerRegistration.unregister();"],"sourceRoot":""}