{"version":3,"sources":["components/Loading/index.js","components/Navbar/index.js","components/Footer/index.js","components/MainContainer/index.js","App.js","serviceWorkerRegistration.js","index.js"],"names":["Loading","type","color","height","width","delay","className","Navbar","useState","window","location","hash","setHash","useEffect","addEventListener","to","id","Date","now","Footer","href","target","rel","Sidenav","lazy","Container","props","fallback","children","MainImage","HomePage","AboutPage","PortfolioPage","ResumePage","ContactPage","App","basename","process","MainContainer","exact","path","component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.36aec51a.chunk.js","sourcesContent":["import React from 'react';\nimport ReactLoading from 'react-loading';\nimport './style.css'\n\n\nconst Loading = () => {\n    return (\n        // Render loading animation\n         <ReactLoading type={'cylon'} color={'#746634'} height={'40%'} width={'20%'} delay={500} className={'loader'}/>\n    );\n}\n \nexport default Loading;","import React, { useState, useEffect } from 'react';\nimport { Link } from \"react-router-dom\";\nimport './style.css'\n\n\n\nfunction Navbar() {\n    // State for window hash\n    const [hash, setHash] = useState(window.location.hash);\n    \n    // Life cycle to set state to hash of current window\n    useEffect(() => {\n        window.addEventListener('hashchange', () => {\n           setHash(window.location.hash);\n        })\n    }, []);\n\n    // Render nave bar and make the current pages nav tab active\n    return (\n        <nav className=\"navbar navbar-expand navbar-light\">\n            <div>\n                <ul className=\"navbar-nav\">\n                    <li className=\"nav-item\">\n                        <Link to=\"/\"  id=\"nav__link-home\" className=\"nav-link home\">\n                            NMK\n                        </Link>\n                    </li>\n                    <li className=\"nav-item\">\n                        <Link to=\"/about\" id=\"nav__link\" key={Date.now()} className={ hash === '#/about' ? \"nav-link active\" : \"nav-link\"}>\n                            About\n                        </Link>\n                    </li>\n                <li className=\"nav-item\">\n                        <Link to=\"/portfolio\" id=\"nav__link\" key={Date.now()} className={hash === '#/portfolio' ? \"nav-link active\" : \"nav-link\"}>\n                            Portfolio\n                        </Link>\n                    </li>\n                <li className=\"nav-item\">\n                        <Link to=\"/resume\" id=\"nav__link\" key={Date.now()}  className={hash === '#/resume' ? \"nav-link active\" : \"nav-link\"}>\n                            Resume\n                        </Link>\n                    </li>\n                </ul>\n            </div>\n        </nav>\n    );\n}\n\nexport default Navbar;\n","import React from 'react';\nimport './style.css'\n\nconst Footer = () => {\n    //Render footer\n    return ( \n        <footer className=\"footer\">\n                <span className=\"text-muted\"> &copy;2021 NMK / Photo by\n                    <a href=\"https://www.benwentzel.net/\" target=\"_blank\" rel=\"noreferrer\"> Ben Wentzel</a>\n                </span>\n        </footer>\n    );\n}\n \nexport default Footer;","import React, { Suspense, lazy } from 'react';\nimport './style.css';\nimport Loading from '../Loading';\n\nconst Sidenav = lazy(() => import('../Sidenav'))\n\nconst Container = (props) => {\n    // Render main container\n    return ( \n        <Suspense fallback={<Loading />} >\n            <main className=\"wrapper\">\n                {props.children}\n                <Sidenav />\n            </main>\n        </Suspense >\n    );\n}\n \nexport default Container;","import React, { Suspense, lazy  } from \"react\";\nimport { HashRouter as Router, Route } from 'react-router-dom';\nimport Navbar from './components/Navbar';\nimport Footer from './components/Footer';\nimport MainContainer from './components/MainContainer';\nimport Loading from \"./components/Loading\";\n\nconst MainImage = lazy(() => import('./components/MainImage'))\nconst HomePage = lazy(() => import('./pages/Home'));\nconst AboutPage = lazy(() => import('./pages/About'));\nconst PortfolioPage = lazy(() => import('./pages/Portfolio'));\nconst ResumePage = lazy(() => import('./pages/Resume'));\nconst ContactPage = lazy(() => import('./pages/Contact'));\n\n\nfunction App() {\n  // Render navbar, bg image, all pages, & footer. Use code splitting and loading animation for slower connections. \n  return (\n    <Router basename={ process.env.PUBLIC_URL }>\n      <Suspense fallback={ <Loading /> }>\n        <MainImage />\n          <Navbar />\n            <MainContainer>\n            \n              <Route exact path=\"/\" component={ HomePage } />\n              <Route exact path=\"/about\" component={ AboutPage } />\n              <Route exact path=\"/portfolio\" component={ PortfolioPage } />\n              <Route exact path=\"/resume\" component={ ResumePage } />\n              <Route exact path=\"/contact\" component={ ContactPage } />\n              \n            </MainContainer>\n          <Footer />\n      </Suspense>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css'\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorkerRegistration.register();"],"sourceRoot":""}